services:
  frontend:
    image: xxroloxx/ttt-frontend:latest
    ports:
      - "80:80"
    build:
      context: ./tic-tac-toe-frontend/
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: tic-tac-toe_frontend_prod
  backend:
    image: xxroloxx/ttt-backend:latest
    container_name: tic-tac-toe_backend_prod
    build: ./tic-tac-toe-backend
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - BUCKET_NAME=${BUCKET_NAME}
      - DYNAMODB_TABLE_NAME=${DYNAMODB_TABLE_NAME}
    working_dir: /app
    ports:
      - "8080:8080"
    networks:
      - backend
  database:
    image: postgres:latest
    container_name: tic-tac-toe_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
    networks:
      - backend
  watchtower:
    image: containrrr/watchtower
    container_name: tic-tac-toe_watchtower_prod
    command: --interval 30
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  postgres-data-dev:
